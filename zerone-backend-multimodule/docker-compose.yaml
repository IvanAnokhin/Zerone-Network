version: "3.7"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.9
    container_name: zookeeper
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.9
    container_name: kafka
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  zeronekafka:
    image: grif8585yandex/zeronekafka
    container_name: zeronekafka
    working_dir: /opt
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
    environment:
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - kafka
      - zookeeper

  postgres:
    container_name: postgres
    image: postgres:15.2
    environment:
      POSTGRES_DB: skillbox
      POSTGRES_USER: skillbox
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  redis:
    container_name: redis
    image: redis:6.2.11
    ports:
      - "6379:6379"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
    environment:
      REDIS_PASSWORD: password123
    volumes:
      - redis:/data/redis

  frontend:
    container_name: frontend
    image: dimatch86/zerone_front_prod
    ports:
      - "80:80"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  backend:
    container_name: backend
    image: eclipse-temurin:19-jdk-jammy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/skillbox?stringtype=unspecified
      SPRING_DATASOURCE_USERNAME: skillbox
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATA_REDIS_HOST: redis
      EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE: http://eureka-server:8761/eureka
      TZ: "Europe/Moscow"
    ports:
      -  "8088:8088"
      -  "1111:1111"
    volumes:
      - ./jars:/app
    working_dir: /app
    command: java -jar backend.jar
    depends_on:
      - api-gateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  admin:
    container_name: admin
    image: eclipse-temurin:19-jdk-jammy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/skillbox?stringtype=unspecified
      SPRING_DATASOURCE_USERNAME: skillbox
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE: http://eureka-server:8761/eureka
      TZ: "Europe/Moscow"
    ports:
      - "8083:8083"
    volumes:
      - ./jars:/app
    working_dir: /app
    command: java -jar admin.jar
    depends_on:
      - api-gateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  eureka-server:
    container_name: eureka-server
    image: eclipse-temurin:19-jdk-jammy
    environment:
      EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE: http://eureka-server:8761/eureka
      TZ: "Europe/Moscow"
    ports:
      - "8761:8761"
    volumes:
      - ./jars:/app
    working_dir: /app
    command: java -jar eureka-server.jar
    depends_on:
      - postgres
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  api-gateway:
    container_name: api-gateway
    image: eclipse-temurin:19-jdk-jammy
    environment:
      EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE: http://eureka-server:8761/eureka
      TZ: "Europe/Moscow"
    ports:
      - "8086:8086"
    volumes:
      - ./jars:/app
    working_dir: /app
    command: java -jar api-gateway.jar
    depends_on:
      - eureka-server
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  grafana:
    container_name: grafana
    image: grafana/grafana:9.5.1
    build: './config/grafana'
    ports:
      - "3000:3000"
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      monitoring:
        aliases:
          - grafana
    depends_on:
      - prometheus
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.43.0
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/prometheus
    networks:
      monitoring:
        aliases:
          - prometheus
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  sonarqube:
    container_name: sonarqube
    image: sonarqube
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_extensions:/opt/sonarqube/extensions
    depends_on:
      - postgres
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

networks:
  monitoring:

volumes:
  postgres:
  redis:
  sonarqube_data:
  sonarqube_conf:
  sonarqube_extensions: